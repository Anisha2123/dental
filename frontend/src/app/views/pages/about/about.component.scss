
@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');
// color variables
$colors: (
  50: #ffffff,
  100: #F5F6F8,
  200: #E5E5E5,
  500: #ED2323,
  600: #152130,
  700: #FF6227,
  900:#000000,
);

@function color($color) {
  @if map-has-key($colors, $color) {
    @return map-get($colors, $color);
  }
  @error "Unknown `#{$color}` in $colors.";
  @return null;
}

//fonts
$fonts: (
  lt: 'AeonikTRIAL-Light',
  lti: 'AeonikTRIAL-LightItalic',
  rg: 'AeonikTRIAL-Regular',
  rgi: 'AeonikTRIAL-RegularItalic',
  bd: 'AeonikTRIAL-Bold',
  bdi: 'AeonikTRIAL-BoldItalic',
);

@function font($font) {
  @if map-has-key($fonts, $font) {
    @return map-get($fonts, $font);
  }
  @error "Unknown `#{$font}` in $fonts.";
  @return null;
}

$imageurl: "../../../../assets/images/home";
$fonturl: "../../../../assets/fonts";

// fields height variable
$field-height: 48px; // field height
$field-height-xl: 40px; // field height responsive xl
$field-height-lg: 38px; // field height responsive lg
$field-height-md: 30px; // field height responsive md

// fields padding variable
$field-padding: 10px 30px; //field padding
$field-padding-xl: 10px; //field height responsive xl
$field-padding-lg: 6px 10px; //field height responsive lg

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @if not $n {
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
  }
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $max: map-get($breakpoints, $name);
  @return if($max and $max > 0, $max - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min:  breakpoint-min($name, $breakpoints);
  $next: breakpoint-next($name, $breakpoints);
  $max:  breakpoint-max($next);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($next, $breakpoints) {
      @content;
    }
  }
}
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);  

@mixin box-shadow($top, $left, $blur, $color, $inset: "") {
  -o-box-shadow: $top $left $blur $color #{$inset};
  -ms-box-shadow: $top $left $blur $color #{$inset};
  -webkit-box-shadow: $top $left $blur $color #{$inset};
  -moz-box-shadow: $top $left $blur $color #{$inset};
  box-shadow: $top $left $blur $color #{$inset};
}

@mixin transform($value) {
  -webkit-transform: $value;
  -ms-transform: $value; // IE9 only
  -o-transform: $value;
  transform: $value;
}

@mixin transition($transition...) {
  -webkit-transition: $transition;
  -o-transition: $transition;
  -moz-transition: $transition;
  transition: $transition;
}

@mixin button-variant($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;

  &:hover,
  &:active,
  &:focus,
  &.focus &.active,
  &.show,
  &-check:checked + &,
  &:focus-visible,
  &:not(.btn-check) + &:hover,
  &:first-child:hover,
  &-check:focus-visible + &,
  &:first-child:active,
  &:not(.btn-check) + &:active {
    color: $color !important;
    background-color: darken($background, 6%) !important;
    border-color: darken($border, 6%) !important;
    box-shadow: none !important;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    background-color: $background;
    border-color: $border;
    box-shadow: none;
    &:hover,
    &:focus,
    &.focus {
      background-color: $background;
      border-color: $border;
      box-shadow: none;
    }
  }
}

@mixin button-outline-variant($color, $background, $border) {
  color: $color;
  // background-color: $background;
  border-color: $border;

  &:hover,
  &:active,
  &:focus,
  &.focus &.active,
  &:focus-visible,
  &:not(.btn-check) + &:hover,
  &:first-child:hover,
  &-check:focus-visible + & {
    color: $background !important;
    background-color: color(900) !important;
    border-color: darken($color, 6%) !important;
    box-shadow: none !important;
  }
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    background-color: $color;
    border-color: $color;
    box-shadow: none;
    &:hover,
    &:focus,
    &.focus {
      background-color: $color;
      border-color: $color;
      box-shadow: none;
    }
  }
}

@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
// Button sizes
@mixin button-size(
  $padding-vertical,
  $padding-horizontal,
  $font-size,
  $line-height,
  $border-radius
) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  line-height: $line-height;
  border-radius: $border-radius;
}

// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin font-face(
  $font-family,
  $file-path,
  $weight: normal,
  $style: normal,
  $asset-pipeline: false
) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    font-display: swap;
    @if $asset-pipeline == true {
      src: font-url("#{$file-path}.eot");
      src: font-url("#{$file-path}.eot?#iefix") format("embedded-opentype"),
        font-url("#{$file-path}.woff") format("woff"),
        font-url("#{$file-path}.ttf") format("truetype"),
        font-url("#{$file-path}.svg##{$font-family}") format("svg");
    } @else {
      src: url("#{$file-path}.eot");
      src: url("#{$file-path}.eot?#iefix") format("embedded-opentype"),
        url("#{$file-path}.woff") format("woff"),
        url("#{$file-path}.ttf") format("truetype"),
        url("#{$file-path}.svg##{$font-family}") format("svg");
    }
  }
}

@include font-face(font(lt), "#{$fonturl}/AeonikTRIAL-Light", "normal", "normal");
@include font-face(font(lti), "#{$fonturl}/AeonikTRIAL-LightItalic", "normal", "normal");
@include font-face(font(rg), "#{$fonturl}/AeonikTRIAL-Regular", "normal", "normal");
@include font-face(font(rgi), "#{$fonturl}/AeonikTRIAL-RegularItalic", "normal", "normal");
@include font-face(font(bd), "#{$fonturl}/AeonikTRIAL-Bold", "normal", "normal");
@include font-face(font(bdi), "#{$fonturl}/AeonikTRIAL-BoldItalic", "normal", "normal");

@mixin absolutecenter($axis: "both") {
  position: absolute;
  @if $axis == "y" {
    top: 50%;
    transform: translateY(-50%);
  }
  @if $axis == "x" {
    left: 50%;
    transform: translateX(-50%);
  }
  @if $axis == "both" {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

// font classes
.font-lt {
  font-family: font(lt)!important;
}
.font-rg {
  font-family: font(rg)!important;
}
.font-bd {
  font-family: font(bd)!important;
}

.mb-30 {
  margin-bottom: 30px;
  @include media-breakpoint-down(xxl) {
    margin-bottom: 20px;
  }
}
.br-10 {
  border-radius: 10px;
}
.br-5 {
  border-radius: 5px !important;
}

// keyframes mixin

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }
  @-moz-keyframes #{$name} {
    @content;
  }
  @-ms-keyframes #{$name} {
    @content;
  }
  @keyframes #{$name} {
    @content;
  }
}

// flex center
@mixin flexcenter($axis: "both") {
  display: flex;
  @if $axis == "y" {
    align-items: center;
  }
  @if $axis == "x" {
    justify-content: center;
  }
  @if $axis == "both" {
    justify-content: center;
    align-items: center;
  }
}

// placeholder
@mixin placeholder {
  ::-webkit-input-placeholder {
    @content;
  }
  :-moz-placeholder {
    @content;
  }
  :-ms-input-placeholder {
    @content;
  }
}

@mixin media-breakpoint-1600 {
  @media (min-width: 1600px) and (max-width: 1680px) {
    @content;
  }
}

@mixin media-breakpoint-1200 {
  @media (min-width: 1200px) and (max-width: 1559px) {
    @content;
  }
}
@mixin text-clamp($lines: 2, $line-height: false) {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
  -moz-line-clamp: $lines;
  -ms-line-clamp: $lines;
  -o-line-clamp: $lines;
  text-overflow: ellipsis;
  @if $line-height {
    max-height: $line-height * $lines * 1px;
  }
}

@mixin padding($p-xl, $p-lg, $p-md, $p-null) {
  padding: $p-null;
  @include media-breakpoint-up(md) {
    padding: $p-md;
  }
  @include media-breakpoint-up(lg) {
    padding: $p-lg;
  }
  @include media-breakpoint-up(xl) {
    padding: $p-xl;
  }
}

// transform-origin
@mixin transform-origin($origin) {
  -webkit-transform-origin: $origin;
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin; // IE9 only
  transform-origin: $origin;
}

// animation
@mixin animation($animation) {
  -webkit-animation: $animation;
  -o-animation: $animation;
  animation: $animation;
}

/* General Styling */
.about-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
    font-family: 'Poppins', sans-serif;
    color: #333;
    line-height: 1.8;
    padding-top: 6rem;
    // padding: 80px 0px;
    margin: 0 auto;
    gap:2rem;
  }
  // ------------Hero section---------------------
  .hero-section {
    width: 100%;
  }
  .hero-section .container{
    background-image: url("../../../../assets/images/about6.jpg");
    background-size: cover;
    background-repeat: no-repeat;
    border-radius: 1rem;
    height: 30rem;
    width:100%;
    padding: 2rem;
    display: flex;
    justify-content: flex-start;
    align-items: center;
  }
  .hero-section .textbox{
    width: 28rem;
  }
  .hero-section .textbox h2{
    color: #fff;
  }
  .hero-section .textbox p{
    color: #c1bdbd;
  }
  
  .cta-button {
    display: inline-block;
    background-color: #e14138;
    color: #fff;
    padding: 12px 20px;
    border-radius: 5px;
    text-decoration: none;
    font-weight: bold;
    margin-top: 20px;
    box-shadow: rgba(0 , 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
  }
  
  .cta-button:hover {
    background-color: #003580;
  }
  
  /* Vision Section */
  .vision-section {
    // margin: 40px 0;
    // display: flex;
    // align-items: center;
    // justify-content: space-between;
    // flex-wrap: wrap;
  }
  .assistDental{
    margin-top: 4rem;
    img{
        border-radius: 30px;
        height: 100%;
        width: 100%;
        object-fit: cover;
    }
    &_right{
        background-color: color(600);
        border-radius: 30px;
        padding: 83px 70px;
    }
    @media (max-width: 1599px){
        &_right{
            padding: 50px 40px;
        }
    }
    // @include media-breakpoint-down(md){
    //     img{
    //         border-radius: 20px;
    //     }
    //     &_right{
    //         padding: 25px;
    //         border-radius: 20px;
    //     }
    // }
    .assistDental_right{
      background-color: #172841;
      color: #fff;
    }
    .cta-button{
      padding: 1rem 1rem;
    }
  }
  
  
    /* Features Section */
  .features-section {
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    // background-color: #f9f9f9;
    padding: 40px 0px;
    border-radius: 10px;
    margin: 40px;
    text-align: center;
    width: 85%;
  }
  .features-section .main_para{
    width: 60%;
  }
  
  .features-grid {
    display:flex;
    justify-content: center;
    align-items: center;
    flex-direction: row;
    flex-wrap: wrap;
    // grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-top: 20px;
    width: 100%;
  }
  
  .feature-card {
    text-align: left;
    // padding: 20px;
    width: 20rem;
    height: 30rem;
    border: 1px solid #ddd;
    border-radius: 2rem;
    background-color: #e1e7e7;
    // box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
    // box-shadow: rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px;
  }
  
  .feature-card:hover {
    transform: translateY(-10px);
  }
  
  .feature-card img {
    // width: 60px;
    width:100%;
    margin-bottom: 10px;
    box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;
    border-radius: 2rem;
  }
  
  .feature-card h3 {
    color: #e14138;
    margin-bottom: 10px;
  }
  .feature-card p{
    width: 100%;
    text-align: left;
    // border: 1px solid black;
  }
  
  /* Call to Action Section */
  .cta-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
    // flex-wrap: wrap;
    text-align: center;
    padding: 1rem 3rem;
    background-color: #622bc7;
    color: white;
    width: 85%;
    border-radius: 10px;
  
    // height: 15rem;
    // border: 1px solid red;
  }
  .cta-section p{
    text-align: center;
  }
  
  .cta-section a {
    color: #ffcc00;
    text-decoration: none;
    font-weight: bold;
  }
   .cta-section button{
    display: inline-block;
    background-color: #fff;
    color:#e14138;
    padding: 12px 20px;
    border-radius: 5px;
    text-decoration: none;
    font-weight: bold;
    margin-top: 20px;
    border: none;
    box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;
   }
  .cta-section a:hover {
    text-decoration: underline;
  }
  .cta-section img{
    height: 10rem;
    // width: 20rem;
    // border: 1px solid black;
  }
  .cta-section .box4{
    display: flex;
    justify-content: flex-start;
    align-items: center;
    // flex-wrap: wrap;
    gap:2rem;
  }
  .box1{
    padding: 10px;
  }
  /* Responsive Design */
  @media (max-width: 768px) {
    .hero-section {
      flex-direction: column;
      text-align: center;
    }
    .cta-section .box4{
      flex-wrap: wrap;
    }
    .cta-section {
      flex-wrap: wrap;
    }
  
    .vision-content {
      flex-direction: column;
    }
  }
  .footer{
    background-color: color(600);
    border-radius: 30px 30px 0 0;
    position: relative;
    z-index: 9;
    width: 100%;
    color: #fff;
    padding: 2rem;
    &:after{
        position: absolute;
        content: '';
        right: 0;top:0;
        width: 330px;
        height: 360px;
        background-image: url('#{$imageurl}/footer-bg.svg');
        background-size: contain;
        background-repeat: no-repeat;
        z-index: 99;
    }
    &_cnt{
        margin-top: 70px;
        &_left{
            p{
                margin-top: 40px;
                font-size: 18px;
                font-family: font(rg);
                color: rgba(color(50), 0.80);
            }
        }
        &_right{
            h3{
                font-size: 20px;
                font-family: font(bd);
                color: color(50);
                margin-bottom: 20px;
            }
            ul{
                li{
                    &:not(:last-child){
                        margin-bottom: 10px;
                    }
                    a{
                        color: rgba(color(50), 0.80);
                        transition: all 0.3s ease;
                        &:hover{
                            color: color(500);
                        }
                    }
                }
            }
        }
    }
    &_btm{
        padding-top: 60px;
        padding-bottom: 40px;
        p{
            font-size: 18px;
            color: rgba(color(50), 0.80);
            margin-bottom: 0;
        }
        h3{
            margin-bottom: 0;
            color: color(50);
            font-size: 20px;
            font-family: font(bd);
            margin-right: 30px;
        }
        ul{
            li{
                margin-right: 25px;
                a{
                    color: color(50);
                    transition: all 0.3s ease;
                    &:hover{
                        color: color(500);
                    }
                }
            }
        }
    }
  
    @include media-breakpoint-down(xl){
        &_cnt{
            &_left{
                img{
                    max-width: 180px;
                }
                p{
                    margin-top: 20px;
                }
            }
        }
    }
    @include media-breakpoint-down(lg){
        &_btm{
            padding-top: 30px;
            padding-bottom: 20px;
        }
    }
  }
    .headerBtn .btn{
      padding: 1rem;
    }
  